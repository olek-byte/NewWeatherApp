import type { OWMGeoItem } from '@/types/geo'
import { http } from './http'

// Axios
export async function searchCities(
  query: string,
  limit = 5,
  signal?: AbortSignal
): Promise<OWMGeoItem[]> {
  if (!query || query.trim().length < 2) return []
  
  try {
    const { data } = await http.get<OWMGeoItem[]>('/geo/1.0/direct', {
      params: { q: query, limit },  // OpenWeatherMap API –æ–∂–∏–¥–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä 'q'
      signal, 
    })
    
    if (import.meta.env.DEV) {
      console.log(`üîç –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è "${query}":`, data)
    }
    
    return data || []
  } catch (error) {
    if (import.meta.env.DEV) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è "${query}":`, error)
    }
    throw error
  }
}

/*
// –§–µ–π–∫–æ–≤—ã –ê–ø–∏ —Å–ª–æ–π 
import type { OWMGeoItem } from '@/types/geo'
import { GEO_MOCK } from '@/mocks/geo.mock'

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º Promise, —á—Ç–æ–±—ã –∫–æ–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤—ã–≥–ª—è–¥–µ–ª –∫–∞–∫ —Å –Ω–∞—Å—Ç–æ—è—â–∏–º API - —Ñ–µ–π–∫ —Å–µ—Ä–≤–µ—Ä.
export async function searchCities(q: string, limit = 5, signal?: AbortSignal): Promise<OWMGeoItem[]> {
  if (!q || q.trim().length < 2) return []

  // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É
  const delay = (ms: number) => new Promise<void>((resolve, reject) => {
    const id = setTimeout(() => resolve(), ms)
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–º–µ–Ω—ã (–∫–∞–∫ —É axios.abort())
    if (signal) {
      signal.addEventListener('abort', () => {
        clearTimeout(id)
        reject(Object.assign(new Error('Canceled'), { code: 'ERR_CANCELED', name: 'CanceledError' }))
      })
    }
  })

  await delay(300) // 300–º—Å ‚Äî –∫–∞–∫ –±—É–¥—Ç–æ —Å–µ—Ç—å –¥—É–º–∞–µ—Ç

  const norm = (s: string) => s.toLowerCase()
  const qn = norm(q)

  const filtered = GEO_MOCK.filter(i =>
    norm(i.name).includes(qn) ||
    (i.state && norm(i.state).includes(qn)) ||
    norm(i.country).includes(qn)
  ).slice(0, limit)

  return filtered
}
  */